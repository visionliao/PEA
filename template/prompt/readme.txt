1.  **清晰的层级结构 (Hierarchy)**
    *   我们使用了 `#` (H1) 作为最高级标题，`##` (H2) 作为主要章节标题（如“核心构成”、“应用示例”），`###` (H3) 作为次级标题。这种清晰的层级关系让大模型可以像阅读一本书的目录一样，轻松理解文档的结构。

2.  **语义化强调 (Semantic Emphasis)**
    *   **加粗 (`**`)**：用加粗突出了 `APE`、`行动 (Action)` 等核心关键词。这会提示大模型这些是需要特别关注的重要术语。
    *   **引用块 (`>`)**：将每个组件的“定义”部分放进了引用块中。这在视觉上将其与普通文本区分开，同时也向大模型发出了一个强烈的信号：“这是一段定义或核心概念的解释”。

3.  **结构化分隔符 (Structural Separators)**
    *   **水平分割线 (`---`)**：我在文档的主要部分之间加入了水平线。这不仅让文档对人类读者更友好，也为大模型提供了清晰的“章节切换”信号，帮助它更好地切分和解析内容。

4.  **格式化的示例代码块 (Formatted Example)**
    *   **代码块 (```yaml ... ```)**：这是**非常重要的**。将普通文本转换为了一个 `yaml` 格式的代码块。
    *   **为什么用代码块？** 大模型非常擅长解析结构化数据（如 JSON, YAML）。将示例放入代码块中，并指定语言为 `yaml`，能让模型毫不费力地将其解析为“键-值”对。
    *   **为什么用 YAML 格式？** 它清晰地将 `行动`、`目的`、`期望` 作为“键”，将具体内容作为“值”，这种结构极其清晰，几乎不可能被误解。模型可以非常精确地提取出每一个部分的内容。
    *   **增加引号和缩进**：在示例内容中加入引号和缩进，进一步增强了结构感，使其看起来更像一个可以被程序处理的“指令对象”。

以上格式，可以让 Markdown 文档不仅对人类读者更加友好、易于理解，更重要的是，它变成了一份高度结构化、语义清晰的“说明书”，大模型可以非常高效和准确地学习、解析并应用其中定义的提示词框架。